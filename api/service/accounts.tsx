/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type { Account, HTTPValidationError } from "./models";
import { useAxios } from "../useAxios";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * @summary Get Accounts
 */
export const useGetAccountsAccountsNameGetHook = () => {
  const getAccountsAccountsNameGet = useAxios<Account[]>();

  return (name: string) => {
    return getAccountsAccountsNameGet({
      url: `/accounts/${name}`,
      method: "get",
    });
  };
};

export const getGetAccountsAccountsNameGetQueryKey = (name: string) => [
  `/accounts/${name}`,
];

export const useGetAccountsAccountsNameGet = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsAccountsNameGetHook>>,
  TError = HTTPValidationError
>(
  name: string,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useGetAccountsAccountsNameGetHook>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAccountsAccountsNameGetQueryKey(name);

  const getAccountsAccountsNameGet = useGetAccountsAccountsNameGetHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetAccountsAccountsNameGetHook>>
  > = () => getAccountsAccountsNameGet(name);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetAccountsAccountsNameGetHook>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!name, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Get Account Balance
 */
export const useGetAccountBalanceAccountNameBalanceGetHook = () => {
  const getAccountBalanceAccountNameBalanceGet = useAxios<number>();

  return (name: string) => {
    return getAccountBalanceAccountNameBalanceGet({
      url: `/account/${name}/balance`,
      method: "get",
    });
  };
};

export const getGetAccountBalanceAccountNameBalanceGetQueryKey = (
  name: string
) => [`/account/${name}/balance`];

export const useGetAccountBalanceAccountNameBalanceGet = <
  TData = AsyncReturnType<
    ReturnType<typeof useGetAccountBalanceAccountNameBalanceGetHook>
  >,
  TError = HTTPValidationError
>(
  name: string,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<
        ReturnType<typeof useGetAccountBalanceAccountNameBalanceGetHook>
      >,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAccountBalanceAccountNameBalanceGetQueryKey(name);

  const getAccountBalanceAccountNameBalanceGet =
    useGetAccountBalanceAccountNameBalanceGetHook();

  const queryFn: QueryFunction<
    AsyncReturnType<
      ReturnType<typeof useGetAccountBalanceAccountNameBalanceGetHook>
    >
  > = () => getAccountBalanceAccountNameBalanceGet(name);

  const query = useQuery<
    AsyncReturnType<
      ReturnType<typeof useGetAccountBalanceAccountNameBalanceGetHook>
    >,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!name, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};
